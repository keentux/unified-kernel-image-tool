#!/bin/bash

shopt -s extglob nullglob
set -e

function get_bootloader_name() {
    if (command -v sdbootutil > /dev/null 2>&1); then
        # Should return "grub2" or "systemd-boot"
        sdbootutil bootloader
    else
        echo "grub2"
    fi
}

function get_uki_data_osrel() {
    local uki_p="$1"
    local data_key="$2"
    local section="osrel"
    objdump -h "$1" | grep -wq ".${section}" || echo ""
    local data="$(objdump -s -j ".${section}" "${uki_p}" \
        | sed -n '/[0-9a-f]/s/^[^ ]* *\([^ ]* *\)\{5\}//p' \
        | tr -d '\n' \
        | tr -d '\0')"
    [ "$data" = "" ] ||\
        printf %s "${data}" | sed -n "s/.*${data_key}=\"\([^\"]*\)\".*/\1/p"
}

function get_uki_prettyname() {
    get_uki_data_osrel "$1" "PRETTY_NAME"
}

function get_uki_ver_id() {
    get_uki_data_osrel "$1" "VERSION_ID"
}

function get_uki_id() {
    get_uki_data_osrel "$1" "ID"
}

function get_snapshot_value() {
    local num="$1"
    local key="$2"

    grep "<${key}>" "/.snapshots/${num}/info.xml"\
        | sed -E "s|.*<${key}>(.*)</${key}>.*|\1|"
}

# Command functions
# when creating a snapshot we create a sym links if not exists to all last
# snapshots. And adda bootloader entry using addonrelated to the link
create_snapshot()
{
    fs="$2"
    num="$3"
    addonsNbr=$(find /usr/share/unified/addons/*.addon.efi | wc -l)
    idx=1
    grubconf_snapshot_path="/etc/grub.d/45_uki_snapshot"
    grubconf_uki_path="/etc/grub.d/44_ukit_uki"
    sdboot_entries="/boot/efi/loader/entries"

    if [ "$(get_bootloader_name)" == "grub2" ]; then
        # echo "#!/bin/sh" > "$grubconf_snapshot_path"
        # echo "set -e" >> "$grubconf_snapshot_path"
        # echo "cat << EOF" >> "$grubconf_snapshot_path"
        # grub2 not ready for snapshots
        return 0
    else
        # If not currently booted with an UKI cancel
        bootctl --print-stub-path > /dev/null 2>&1 || return 0
    fi
    [ "$fs" = btrfs ] || return 1
    snapshots="$(find /.snapshots -mindepth 1 -maxdepth 1 -type d | sort -Vr)"
    for snapshot in ${snapshots}; do
        [ $idx -ge "$addonsNbr" ] && break
        # Install the addon
        if [ ! -f "/boot/efi/EFI/addons/uki$idx.addon.efi" ]; then
            [ ! -d "/boot/efi/EFI/addons" ] &&\
                mkdir -p "/boot/efi/EFI/addons"
            cp "/usr/share/unified/addons/uki$idx.addon.efi"\
                "/boot/efi/EFI/addons/uki$idx.addon.efi"
        fi
        # Create the snapshot entry
        [ -L /.snapshots/uki$idx ] && rm /.snapshots/uki$idx
        ln -f -r -s "$snapshot" /.snapshots/uki$idx
        snapshot_num="$(basename $snapshot)"
        date=$(get_snapshot_value "$snapshot_num" "date")
        date=$(echo $date | sed 's/\(.*\) \(.*\):.*/\1T\2/')
        style=$(get_snapshot_value "$snapshot_num" "style")
        if [ "$(get_bootloader_name)" == "grub2" ]; then
            # sed -n "/menuentry/,/}/p" $grubconf_uki_path \
            #     | sed "s/menuentry.*/menuentry 'OpenSUSE Tumbleweed uki ($date) ($style)' {/" \
            #     | sed "/chainloader/s/^/    add-on \/EFI\/addons\/uki$idx.addon.efi\n/"\
            #     &>> "$grubconf_snapshot_path"
            {}
        else
            # Create the uki-$idx.conf
            curr_stub="$(bootctl --print-stub-path)"
            pretty_name="$(get_uki_prettyname ${curr_stub})"
            ver_id="$(get_uki_ver_id ${curr_stub})"
            uki_id="$(get_uki_id ${curr_stub})"
            uki_name=$(basename "${curr_stub}" .efi)
            title="Snapper: ${pretty_name} ${ver_id} ($snapshot_num@$uki_name)"
            esp_path="$(bootctl --print-esp-path)"
            curr_efi="${curr_stub#${esp_path}}"
            uki_name="$(basename ${curr_stub})"
            {
                echo "title    ${title}"
                echo "sort-key ${uki_id}"
                echo "efi      ${curr_efi}"
                echo "add-on   /EFI/addons/uki$idx.addon.efi" 
            } &> /boot/efi/loader/entries/uki-$idx.conf
        fi
        ((idx++))
    done

    # if [ "$(get_bootloader_name)" == "grub2" ]; then
    #     echo "EOF" >> "$grubconf_snapshot_path"
    #     chmod +x "$grubconf_snapshot_path"
    #     grub2-mkconfig -o /boot/grub2/grub.cfg
    # fi
    # Remove older link if not already deleted
    if [[ $idx -le $addonsNbr ]]; then
        for ((old=idx; old <= addonsNbr; old++)); do
            [ -f "/.snapshots/uki$old" ] &&\
                rm "/.snapshots/uki$old"
            [ -f "/boot/efi/EFI/addons/uki$old.addon.efi" ] &&\
                rm "/boot/efi/EFI/addons/uki$old.addon.efi"
            [ -f "/boot/efi/loader/entries/uki-$old.conf" ] &&\
                rm "/boot/efi/loader/entries/uki-$old.conf"
        done
    fi
}

# When going to delete a snapshot, remove the link uki snapshot first
delete_snapshot()
{
    local fs="$2"
    local num="$3"

    [ "$fs" = btrfs ] || return 1
    ukiLink=$(find -L /.snapshots -mindepth 1 -maxdepth 1 -samefile "/.snapshots/$num" | grep -v "/.snapshots/$num")
    for link in $ukiLink; do
        rm "$link"
    done
}


# Entry Points

h()
{
    echo "Available commands:"
    echo "${!commands[@]}"
}

declare -A commands

# Executed after a new snapshot was created
commands['create-snapshot-post']=create_snapshot
# Executes before a snapshot is removed
commands['delete-snapshot-pre']=delete_snapshot
# Executed after the default snapshot was changed
commands['set-default-snapshot-post']=set_default_snapshot
commands['help']=h

cmd="$1"
shift
[ -n "$cmd" ] || cmd=help
if [ "${#commands[$cmd]}" -gt 0 ]; then
    ${commands[$cmd]} "$@"
fi

